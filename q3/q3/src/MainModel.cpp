/**
 * Source file for the MainModel model
 * Generated by the TERRA CSPm2LUNA generator version 1.1.3
 *
 * protected region document description on begin
 *
 * protected region document description end
 */

#include "MainModel.h"
// protected region additional headers on begin
// Each additional header should get a corresponding dependency in the Makefile
// protected region additional headers end

namespace MainModel { 

MainModel::MainModel() :
    Parallel(NULL)
{
  SETNAME(this, "MainModel");

  // Initialize channels
  mycontrollerTerracontrollerOutput_to_linearSystemTerralinearSystemInputTerraChannel = new UnbufferedChannel<double, One2In, Out2One>();
  mylinearSystemTerralinearSystemOutput_to_controllerTerralinearSystemToControllerInputChannel = new UnbufferedChannel<double, One2In, Out2One>();
  mystepTerrastepOutput_to_controllerTerrastepInputChannel = new UnbufferedChannel<double, One2In, Out2One>();

  // Initialize model objects
  mycontrollerTerra = new controllerTerra::controllerTerra(mycontrollerTerracontrollerOutput_to_linearSystemTerralinearSystemInputTerraChannel, mylinearSystemTerralinearSystemOutput_to_controllerTerralinearSystemToControllerInputChannel, mystepTerrastepOutput_to_controllerTerrastepInputChannel);
  SETNAME(mycontrollerTerra, "controllerTerra");
  // Make controllerTerra recursive
  Recursion<CSProcess>* mycontrollerTerraRecursion = new Recursion<CSProcess>(mycontrollerTerra);
  SETNAME(mycontrollerTerraRecursion, "controllerTerra-recursion");
  mycontrollerTerraRecursion->setEvaluateCondition(true);  mylinearSystemTerra = new linearSystemTerra::linearSystemTerra(mycontrollerTerracontrollerOutput_to_linearSystemTerralinearSystemInputTerraChannel, mylinearSystemTerralinearSystemOutput_to_controllerTerralinearSystemToControllerInputChannel);
  SETNAME(mylinearSystemTerra, "linearSystemTerra");
  // Make linearSystemTerra recursive
  Recursion<CSProcess>* mylinearSystemTerraRecursion = new Recursion<CSProcess>(mylinearSystemTerra);
  SETNAME(mylinearSystemTerraRecursion, "linearSystemTerra-recursion");
  mylinearSystemTerraRecursion->setEvaluateCondition(true);  mystepTerra = new stepTerra::stepTerra(mystepTerrastepOutput_to_controllerTerrastepInputChannel);
  SETNAME(mystepTerra, "stepTerra");
  // Make stepTerra recursive
  Recursion<CSProcess>* mystepTerraRecursion = new Recursion<CSProcess>(mystepTerra);
  SETNAME(mystepTerraRecursion, "stepTerra-recursion");
  mystepTerraRecursion->setEvaluateCondition(true);

  // Register model objects
  this->append_child(mycontrollerTerraRecursion);
  this->append_child(mylinearSystemTerraRecursion);
  this->append_child(mystepTerraRecursion);

  // protected region constructor on begin

  // protected region constructor end
}

MainModel::~MainModel()
{
  // TODO Properly destroy all additional objects that got defined in the constructor

  // protected region destructor on begin

  // protected region destructor end

  // Destroy model objects
  delete mystepTerra;
  delete mylinearSystemTerra;
  delete mycontrollerTerra;

  // Destroy channels
  delete mycontrollerTerracontrollerOutput_to_linearSystemTerralinearSystemInputTerraChannel;
  delete mylinearSystemTerralinearSystemOutput_to_controllerTerralinearSystemToControllerInputChannel;
  delete mystepTerrastepOutput_to_controllerTerrastepInputChannel;
}



// protected region additional functions on begin

// protected region additional functions end

// Close namespace(s)
} 
