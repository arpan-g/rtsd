/**
 * Source file for the Consumer21 model
 * Generated by the TERRA CSPm2LUNA generator version 1.1.1
 *
 * protected region document description on begin
 *
 * protected region document description end
 */

#include "Consumer21.h"
// protected region additional headers on begin
// Each additional header should get a corresponding dependency in the Makefile
// protected region additional headers end

namespace MainModel { namespace Consumer21 { 



Consumer21::Consumer21(ChannelOut<int> *C2IN1, ChannelOut<int> *C2IN2) :
    Recursion<CSPConstruct>()
{
  SETNAME(this, "Consumer21");

  // Initialize model objects
  myC2R1 = new Reader<int>(&a, C2IN1);
  SETNAME(myC2R1, "C2R1");
  myC2R2 = new Reader<int>(&b, C2IN2);
  SETNAME(myC2R2, "C2R2");
  myCCode1 = new CCode1::CCode1(a);
  SETNAME(myCCode1, "CCode1");
  myCCode2 = new CCode2::CCode2(b);
  SETNAME(myCCode2, "CCode2");

  // Create SEQUENTIAL_C21 group
  mySEQUENTIAL_C21 = new Sequential(
    (CSPConstruct *) myC2R1,
    (CSPConstruct *) myCCode1,
    NULL
  );
  SETNAME(mySEQUENTIAL_C21, "SEQUENTIAL_C21");

  // Create SEQUENTIAL_C22 group
  mySEQUENTIAL_C22 = new Sequential(
    (CSPConstruct *) myC2R2,
    (CSPConstruct *) myCCode2,
    NULL
  );
  SETNAME(mySEQUENTIAL_C22, "SEQUENTIAL_C22");

  // Create SEQUENTIAL group
  mySEQUENTIAL = new Sequential(
    (CSPConstruct *) mySEQUENTIAL_C21,
    (CSPConstruct *) mySEQUENTIAL_C22,
    NULL
  );
  SETNAME(mySEQUENTIAL, "SEQUENTIAL");

  // Register SEQUENTIAL as top-level recursive object
  setToActivate(mySEQUENTIAL);
  setEvaluateCondition(true);


  // protected region constructor on begin

  // protected region constructor end
}

Consumer21::~Consumer21()
{
  // TODO Properly destroy all additional objects that got defined in the constructor

  // protected region destructor on begin

  // protected region destructor end

  // Destroy model groups
  delete mySEQUENTIAL;
  delete mySEQUENTIAL_C21;
  delete mySEQUENTIAL_C22;

  // Destroy model objects
  delete myCCode2;
  delete myCCode1;
  delete myC2R2;
  delete myC2R1;
}



// protected region additional functions on begin

// protected region additional functions end

// Close namespace(s)
} } 
