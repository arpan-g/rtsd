/**
 * Source file for the MainModel model
 * Generated by the TERRA CSPm2LUNA generator version 1.1.3
 *
 * protected region document description on begin
 *
 * protected region document description end
 */

#include "MainModel.h"
// protected region additional headers on begin
// Each additional header should get a corresponding dependency in the Makefile
// protected region additional headers end

namespace MainModel { 

MainModel::MainModel() :
    Parallel(NULL)
{
  SETNAME(this, "MainModel");

  // Initialize channels
  mycontrollerTERRAcontrollerOutput_to_linearSystemTERRAlinearInputChannel = new UnbufferedChannel<double, One2In, Out2One>();
  mylinearSystemTERRAlinearOutput_to_controllerTERRAlinearInputChannel = new UnbufferedChannel<double, One2In, Out2One>();
  mystepTERRAstepOutput_to_controllerTERRAstepInputChannel = new UnbufferedChannel<double, One2In, Out2One>();

  // Initialize model objects
  mycontrollerTERRA = new controllerTERRA::controllerTERRA(mycontrollerTERRAcontrollerOutput_to_linearSystemTERRAlinearInputChannel, mylinearSystemTERRAlinearOutput_to_controllerTERRAlinearInputChannel, mystepTERRAstepOutput_to_controllerTERRAstepInputChannel);
  SETNAME(mycontrollerTERRA, "controllerTERRA");
  // Make controllerTERRA recursive
  Recursion<CSProcess>* mycontrollerTERRARecursion = new Recursion<CSProcess>(mycontrollerTERRA);
  SETNAME(mycontrollerTERRARecursion, "controllerTERRA-recursion");
  mycontrollerTERRARecursion->setEvaluateCondition(true);  mylinearSystemTERRA = new linearSystemTERRA::linearSystemTERRA(mycontrollerTERRAcontrollerOutput_to_linearSystemTERRAlinearInputChannel, mylinearSystemTERRAlinearOutput_to_controllerTERRAlinearInputChannel);
  SETNAME(mylinearSystemTERRA, "linearSystemTERRA");
  // Make linearSystemTERRA recursive
  Recursion<CSProcess>* mylinearSystemTERRARecursion = new Recursion<CSProcess>(mylinearSystemTERRA);
  SETNAME(mylinearSystemTERRARecursion, "linearSystemTERRA-recursion");
  mylinearSystemTERRARecursion->setEvaluateCondition(true);  mystepTERRA = new stepTERRA::stepTERRA(mystepTERRAstepOutput_to_controllerTERRAstepInputChannel);
  SETNAME(mystepTERRA, "stepTERRA");
  // Make stepTERRA recursive
  Recursion<CSProcess>* mystepTERRARecursion = new Recursion<CSProcess>(mystepTERRA);
  SETNAME(mystepTERRARecursion, "stepTERRA-recursion");
  mystepTERRARecursion->setEvaluateCondition(true);

  // Register model objects
  this->append_child(mystepTERRARecursion);
  this->append_child(mycontrollerTERRARecursion);
  this->append_child(mylinearSystemTERRARecursion);

  // protected region constructor on begin

  // protected region constructor end
}

MainModel::~MainModel()
{
  // TODO Properly destroy all additional objects that got defined in the constructor

  // protected region destructor on begin

  // protected region destructor end

  // Destroy model objects
  delete mystepTERRA;
  delete mylinearSystemTERRA;
  delete mycontrollerTERRA;

  // Destroy channels
  delete mycontrollerTERRAcontrollerOutput_to_linearSystemTERRAlinearInputChannel;
  delete mylinearSystemTERRAlinearOutput_to_controllerTERRAlinearInputChannel;
  delete mystepTERRAstepOutput_to_controllerTERRAstepInputChannel;
}



// protected region additional functions on begin

// protected region additional functions end

// Close namespace(s)
} 
