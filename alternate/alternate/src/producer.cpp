/**
 * Source file for the producer model
 * Generated by the TERRA CSPm2LUNA generator version 1.1.1
 *
 * protected region document description on begin
 *
 * protected region document description end
 */

#include "producer.h"
// protected region additional headers on begin
// Each additional header should get a corresponding dependency in the Makefile
// protected region additional headers end

namespace MainModel { namespace producer { 

/*
 * Global variable to access the model instance
 * TODO This fails when producer is used multiple times!
 */
producer* g_producer;

// Wrapper function of evaluate function for the WG0L10 guard
bool myWG0L10GuardEvaluateWrapper()
{
  // Just call the class function
  return g_producer->WG0L10GuardEvaluate();
}

// Wrapper function of evaluate function for the WG10L20 guard
bool myWG10L20GuardEvaluateWrapper()
{
  // Just call the class function
  return g_producer->WG10L20GuardEvaluate();
}

// Wrapper function of evaluate function for the WG20 guard
bool myWG20GuardEvaluateWrapper()
{
  // Just call the class function
  return g_producer->WG20GuardEvaluate();
}

producer::producer(ChannelIn<int> *PG0L10PORT, ChannelIn<int> *PG10L20port, ChannelIn<int> *PG20) :
    Sequential(NULL)
{
  SETNAME(this, "producer");
  g_producer = this;

  // Initialize model objects
  myWG0L10 = new Writer<int>(&pVar, PG0L10PORT);
  SETNAME(myWG0L10, "WG0L10");
  myWG10L20 = new Writer<int>(&pVar, PG10L20port);
  SETNAME(myWG10L20, "WG10L20");
  myWG20 = new Writer<int>(&pVar, PG20);
  SETNAME(myWG20, "WG20");
  mytakeInputs = new takeInputs::takeInputs(pVar);
  SETNAME(mytakeInputs, "takeInputs");

  // Set conditions for the guarded objects that are not in a Sequential group
  AltIfOption<int>* myWG0L10_guard = new AltIfOption<int>(myWG0L10, myWG0L10GuardEvaluateWrapper);
  SETNAME(myWG0L10_guard, "WG0L10-guard");
  AltIfOption<int>* myWG10L20_guard = new AltIfOption<int>(myWG10L20, myWG10L20GuardEvaluateWrapper);
  SETNAME(myWG10L20_guard, "WG10L20-guard");
  AltIfOption<int>* myWG20_guard = new AltIfOption<int>(myWG20, myWG20GuardEvaluateWrapper);
  SETNAME(myWG20_guard, "WG20-guard");
  // Create ALTERNATIVE group
  myALTERNATIVE = new Alternative(
    true,
    (CSPConstruct *) myWG20_guard,
    (CSPConstruct *) myWG0L10_guard,
    (CSPConstruct *) myWG10L20_guard,
    NULL
  );
  SETNAME(myALTERNATIVE, "ALTERNATIVE");


  // Register model objects
  this->append_child(mytakeInputs);
  this->append_child(myALTERNATIVE);

  // protected region constructor on begin

  // protected region constructor end
}

producer::~producer()
{
  // TODO Properly destroy all additional objects that got defined in the constructor

  // protected region destructor on begin

  // protected region destructor end

  // Destroy model groups
  delete myALTERNATIVE;

  // Destroy model objects
  delete mytakeInputs;
  delete myWG20;
  delete myWG10L20;
  delete myWG0L10;
}

bool producer::WG0L10GuardEvaluate()
{
  return pVar>0;
}

bool producer::WG10L20GuardEvaluate()
{
  return pVar<0;
}

bool producer::WG20GuardEvaluate()
{
  return pVar==0;
}

// protected region additional functions on begin

// protected region additional functions end

// Close namespace(s)
} } 
